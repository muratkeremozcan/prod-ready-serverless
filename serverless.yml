service: workshop-${self:custom.name}

frameworkVersion: '3'

custom:
  name: murat
  export-env:
    overwrite: true
  # Configures throttling settings for the API Gateway stage
  # They apply to all http endpoints, unless specifically overridden
  # 10k for the whole region is the default, we can limit the whole API gateway here,
  # and also at function level using throttling property
  apiGatewayThrottling:
    maxRequestsPerSecond: 1000
    maxConcurrentRequests: 500
  # Customer Managed Key for tighter security > Configure IAM Permissions for KMS
  # We want the default value to be dev, but if there is a value we want that to be overridden
  ssmStage: ${param:ssmStage, sls:stage}
  # SNS & EventBridge in e2e tests >
  # the serverless-export-outputs plugin to capture the E2eTestQueueUrl
  # and CognitoUserPoolServerClientId outputs in a file called .cfnoutputs.env
  exportOutputs:
    include:
      - E2eTestQueueUrl
      - CognitoUserPoolServerClientId
    output:
      file: ./.cfnoutputs.env
  # Structured logs with JSON
  # the log levels are a hierarchy, TRACE < DEBUG < INFO < ERROR < FATAL
  # so if LOG_LEVEL is INFO then any INFO, ERROR and FATAL logs would be recorded, but TRACE & DEBUG logs are omitted
  logLevel:
    prod: INFO
    stage: INFO
    default: DEBUG
  # 1. in temp branches and dev, don’t touch my sampling rate. I want 100% , and. I want  debug.
  # 2. in stage or prod, you can give me sampling rate, so there is less cost
  sampleRate:
    prod: 0.1
    stage: 0.1
    default: 1
  # Distributed tracing with X-ray > functions to inherit the permissions from the default IAM role in provider section
  # serverless-iam-roles-per-function:
  #   defaultInherit: true
  # Lumigo
  # lumigo:
  #   token: ${ssm:/LUMIGO_TOKEN}
  #   nodePackageManager: npm

provider:
  name: aws
  # Make our API gateway regional
  endpointType: REGIONAL
  runtime: nodejs18.x
  region: us-east-1 # us-east-1 is the default region for API Gateway if left out
  # Issue individual function permissions (moved everything the below to the functions instead)
  # iam:
  #   role:
  #     statements:
  ## ...
  # Distributed tracing with X-ray
  # iam:
  #   role:
  #     statements:
  #       - Effect: Allow
  #         Action:
  #           - 'xray:PutTraceSegments'
  #           - 'xray:PutTelemetryRecords'
  #         Resource: '*'
  # tracing:
  #   apiGateway: true
  #   lambda: true

  environment:
    baseUrl: !Sub https://${ApiGatewayRestApi}.execute-api.${AWS::Region}.amazonaws.com/${sls:stage} # used in Cypress
    rest_api_url: !Sub https://${ApiGatewayRestApi}.execute-api.${AWS::Region}.amazonaws.com/${sls:stage} # used in Jest e2e
    deployment: ${sls:stage}
    stage: ${sls:stage}
    serviceName: ${self:service}
    CLOUDFRONT_URL: 'https://d27lew3mfrizo7.cloudfront.net'
    # Fixing the connection closing issue with Middy
    middy_cache_enabled: true
    middy_cache_expiry_milliseconds: 60000 # 1 mins
    # Share SSM parameters across these temporary environments
    # look for a ssmStage parameter from the CLI, and if not found, it'll fall back to the built-in sls:stage variable
    ssmStage: ${param:ssmStage, sls:stage}
    # MAILOSAUR_API_KEY: !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/MAILOSAUR_API_KEY
    MAILOSAUR_API_KEY: ${ssm:/MAILOSAUR_API_KEY} # short version
    # Structured logs with JSON
    # LOG_LEVEL: debug # global setting for AWS lambda powerTools logger
    # if it's one of the custom, use it, otherwise use default
    LOG_LEVEL:
      ${self:custom.logLevel.${sls:stage}, self:custom.logLevel.default}
    # 1. in temp branches and dev, don’t touch my sampling rate. I want 100% , and. I want  debug.
    # 2. in stage or prod, you can give me sampling rate, so there is less cost
    POWERTOOLS_LOGGER_SAMPLE_RATE:
      ${self:custom.sampleRate.${sls:stage}, self:custom.sampleRate.default}
    POWERTOOLS_LOGGER_LOG_EVENT: true # log the incoming event
    CLOUDFRONT_DEV_URL: https://d27lew3mfrizo7.cloudfront.net/dev
    CLOUDFRONT_STAGE_URL: https://d27lew3mfrizo7.cloudfront.net/stage

plugins:
  # exports the environment variables to a **.env** file.
  - serverless-export-env
  # SNS & EventBridge in e2e tests > capture conditional CloudFormation outputs in .env file (export-env can't do conditional)
  - serverless-export-outputs
  # configures API gateway throttling (10k for the whole region is the default)
  - serverless-api-gateway-throttling
  # Issue individual function permissions
  - serverless-iam-roles-per-function
  # Lumigo
  # - serverless-lumigo

functions:
  get-index:
    handler: functions/get-index.handler
    # When you use the http event in Serverless Framework with AWS as your provider,
    # it automatically creates an Amazon API Gateway for you
    # the properties you set under the http key (like path, method, and cors) define the configuration for this API Gateway.
    events:
      - http:
          path: /
          method: get
          cors: true
    # Exercise: Displaying the restaurants on the landing page
    # Serverless framework ALWAYS uses the logical ID ApiGatewayRestApi for the API Gateway REST API resource it creates.
    # So you can construct the URL for the /restaurants endpoint using the Fn::Sub CloudFormation pseudo function (or the !Sub shorthand)
    # !Sub https://${ApiGatewayRestApi}.execute-api.${AWS::Region}.amazonaws.com/${sls:stage}/restaurants
    environment:
      restaurants_api: !Sub https://${ApiGatewayRestApi}.execute-api.${AWS::Region}.amazonaws.com/${sls:stage}/restaurants
      orders_api: !Sub https://${ApiGatewayRestApi}.execute-api.${AWS::Region}.amazonaws.com/${sls:stage}/orders
      # Secure API Gateway with User Pools:
      # enable the UI to register and sign in with the Cognito User Pool
      cognito_user_pool_id: !Ref CognitoUserPool
      cognito_client_id: !Ref WebCognitoUserPoolClient
      # not needed as of SNS & EventBridge in e2e tests > Capture CloudFormation outputs in .env file
      cognito_server_client_id: !Ref ServerCognitoUserPoolClient
    # Configure custom throttling for the function
    throttling:
      maxRequestsPerSecond: 2000
      maxConcurrentRequests: 1000
    iamRoleStatements:
      - Effect: Allow
        Action: dynamodb:scan
        Resource: !GetAtt RestaurantsTable.Arn
      - Effect: Allow
        Action: execute-api:Invoke
        Resource: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGatewayRestApi}/${sls:stage}/GET/restaurants

  get-restaurants:
    handler: functions/get-restaurants.handler
    events:
      - http:
          path: /restaurants
          method: get
          cors: true
          # Securing the API Gateway:
          # Protect the API Gateway endpoint with AWS_IAM: add the authorizer property to the http event
          # anyone who calls the GET /restaurants endpoint would need to sign the HTTP request using their IAM credentials
          authorizer: aws_iam
    # Notice that the restaurants_table environment variable is referencing (using the CloudFormation pseudo function !Ref)
    environment:
      restaurants_table: !Ref RestaurantsTable
    iamRoleStatements:
      # Load app configurations from SSM Parameter Store with cache and cache invalidation
      - Effect: Allow
        Action: dynamodb:scan
        Resource: !GetAtt RestaurantsTable.Arn
      - Effect: Allow
        Action: execute-api:Invoke
        Resource: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGatewayRestApi}/${sls:stage}/GET/restaurants
      - Effect: Allow
        Action: ssm:GetParameters*
        # Share SSM parameters across these temporary environments
        Resource:
          - !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${self:service}/${param:ssmStage,
            sls:stage}/get-restaurants/config

  search-restaurants:
    handler: functions/search-restaurants.handler
    events:
      - http:
          path: /restaurants/search
          method: post
          cors: true
          # Secure API Gateway with User Pools:
          # After adding this, the POST /restaurants/search endpoint is now an authenticated endpoint.
          # To call it, the user needs to first sign in to the Cognito User Pool we created earlier,
          # obtain an authentication token and include the token in the HTTP request.
          authorizer:
            name: CognitoAuthorizer
            type: COGNITO_USER_POOLS
            arn: !GetAtt CognitoUserPool.Arn
          # enable request validation at the API gateway (vs our code)
          # this way, invalid requests do not cost us
          request:
            schema:
              application/json: ${file(lib/search-restaurants-request.json)}
    environment:
      restaurants_table: !Ref RestaurantsTable
    iamRoleStatements:
      # Creating the Restaurants API: ensure that our lambda functions can access the DynamoDB table
      - Effect: Allow
        Action: dynamodb:scan
        Resource: !GetAtt RestaurantsTable.Arn
      - Effect: Allow
        Action: ssm:GetParameters*
        Resource:
          # Securing the API Gateway: Protect the API Gateway endpoint with AWS_IAM: Add a shared IAM permissions
          - !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${self:service}/${param:ssmStage,
            sls:stage}/search-restaurants/config
          # Load secrets from SSM parameter store with cache and cache invalidation
          - !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${self:service}/${param:ssmStage,
            sls:stage}/search-restaurants/secretString
      # Customer Managed Key for tighter security > Configure IAM Permissions for KMS
      - Effect: Allow
        Action: kms:Decrypt
        # Resource: ${ssm:/${self:service}/${param:ssmStage, sls:stage}/kmsArn}
        # so that it works on temp branches...
        Resource: ${ssm:/${self:service}/${self:custom.ssmStage}/kmsArn}

  # Processing Events with EventBridge and Lambda > Add place-order function
  place-order:
    handler: functions/place-order.handler
    events:
      - http:
          path: /orders
          method: post
          cors: true
          # This function also uses the same Cognito User Pool for authorization,
          # as it'll be called directly by the client app (through API Gateway)
          authorizer:
            name: CognitoAuthorizer
            type: COGNITO_USER_POOLS
            arn: !GetAtt CognitoUserPool.Arn
    #  Notice that this new function references the newly created EventBridge bus
    environment:
      bus_name: !Ref EventBus
    iamRoleStatements:
      # Processing Events with EventBridge and Lambda > Add permission to publish events to EventBridge
      - Effect: Allow
        Action: events:PutEvents
        Resource: !GetAtt EventBus.Arn

  # Processing Events with EventBridge and Lambda > Add notify-restaurant function
  notify-restaurant:
    handler: functions/notify-restaurant.handler
    events:
      - eventBridge:
          eventBus: !Ref EventBus
          pattern: # this is the Event pattern to match
            source:
              - big-mouth
            detail-type:
              - order_placed
    environment:
      bus_name: !Ref EventBus
      restaurant_notification_topic: !Ref RestaurantNotificationTopic
    iamRoleStatements:
      # Processing Events with EventBridge and Lambda > Add permission to publish events to SNS
      - Effect: Allow
        Action: events:PutEvents
        Resource: !GetAtt EventBus.Arn
      - Effect: Allow
        Action: sns:Publish
        Resource: !Ref RestaurantNotificationTopic

# everything under the lower case resources section is custom CloudFormation resources
# that you want to include in the CloudFormation template, all in raw CloudFormation
resources:
  # SNS & EventBridge in e2e tests> Add conditionally deployed SQS queue
  Conditions:
    # IsE2eTest:
    #   Fn::Equals:
    #     - ${sls:stage}
    #     - dev # how do we make this the name of the temp stack? Can't be ${sls:stage} because it will always be true
    # ty the below instead; we know the fixed environments, so just run it if it's not those0
    IsDev:
      Fn::Equals:
        - ${sls:stage}
        - dev
    IsStage:
      Fn::Equals:
        - ${sls:stage}
        - stage
    IsProd:
      Fn::Equals:
        - ${sls:stage}
        - prod
    IsE2eTest:
      Fn::Not:
        - Fn::Or:
            - Condition: IsDev
            - Condition: IsStage
            - Condition: IsProd

  Resources:
    # RestaurantsTable is called the logical Id in CloudFormation,
    # it is a unique id in the CloudFormation template
    # use !Ref or !GetAtt functions to reference a resource
    RestaurantsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        # DDB has 2 billing modes, PAY_PER_REQUEST (on demand) and provisioned
        BillingMode: PAY_PER_REQUEST
        # DynamoDB operates with HASH and RANGE keys as the schemas you need to specify
        # When you specify an attribute in the key schema
        # you also need to add them to the AttributeDefinitions list so you can specify their type
        AttributeDefinitions:
          - AttributeName: name
            AttributeType: S
        KeySchema:
          - AttributeName: name
            KeyType: HASH

    # Create a  Cognito User pool
    CognitoUserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        # Allow users to log in with their email addresses.
        AliasAttributes:
          - email
        # Allow usernames to be case insensitive
        UsernameConfiguration:
          CaseSensitive: false
        # Verify that a user owns his/her email address
        # (ie. by sending a verification code to the email)
        AutoVerifiedAttributes:
          - email
        Policies:
          PasswordPolicy:
            MinimumLength: 8
            RequireLowercase: true
            RequireNumbers: true
            RequireUppercase: true
            RequireSymbols: true
        Schema:
          - AttributeDataType: String
            Mutable: true
            Name: given_name
            Required: true
            StringAttributeConstraints:
              MinLength: '1'
          - AttributeDataType: String
            Mutable: true
            Name: family_name
            Required: true
            StringAttributeConstraints:
              MinLength: '1'
          - AttributeDataType: String
            Mutable: true
            Name: email
            Required: true
            StringAttributeConstraints:
              MinLength: '1'
    # To interact with a Cognito User Pool, you need to create app clients.
    # Each client can be configured with different authentication flows, token expiration,
    # and which attributes it's allowed to read or write.
    # Add Cognito User Pool web client: used by the landing page frontend,
    # this would be used to register new users, and support sign-in and sign-out.
    WebCognitoUserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: web
        UserPoolId: !Ref CognitoUserPool
        ExplicitAuthFlows:
          - ALLOW_USER_SRP_AUTH
          - ALLOW_REFRESH_TOKEN_AUTH
        PreventUserExistenceErrors: ENABLED
    # Add Cognito User Pool server client
    ServerCognitoUserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: server
        UserPoolId: !Ref CognitoUserPool
        ExplicitAuthFlows:
          - ALLOW_ADMIN_USER_PASSWORD_AUTH
          - ALLOW_REFRESH_TOKEN_AUTH
        PreventUserExistenceErrors: ENABLED
    # Processing Events with EventBridge and Lambda > Add EventBridge bus
    EventBus:
      Type: AWS::Events::EventBus
      Properties:
        Name: order_events_${sls:stage}_${self:custom.name}
    # Processing Events with EventBridge and Lambda > add a new SNS topic for notifying restaurants
    RestaurantNotificationTopic:
      Type: AWS::SNS::Topic

    # SNS & EventBridge in e2e tests> Add an SQS queue under resources.Resources
    E2eTestQueue:
      Type: AWS::SQS::Queue
      Condition: IsE2eTest
      Properties:
        MessageRetentionPeriod: 60
        VisibilityTimeout: 1
    # To allow SNS to send messages to an SQS queue, we need to add an SQS queue policy and
    # give SQS:SendMessage permission to the SNS topic.
    E2eTestQueuePolicy:
      Type: AWS::SQS::QueuePolicy
      Condition: IsE2eTest
      Properties:
        Queues:
          - !Ref E2eTestQueue
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal: '*'
              Action: SQS:SendMessage
              Resource: !GetAtt E2eTestQueue.Arn
              Condition:
                ArnEquals:
                  aws:SourceArn: !Ref RestaurantNotificationTopic
            - Effect: Allow
              Principal: '*'
              Action: SQS:SendMessage
              Resource: !GetAtt E2eTestQueue.Arn
              Condition:
                ArnEquals:
                  aws:SourceArn: !GetAtt E2eTestEventBridgeRule.Arn
    # The last step is to subscribe an SQS queue to receive messages from the SNS topic
    # by adding an SNS subscription.
    E2eTestSnsSubscription:
      Type: AWS::SNS::Subscription
      Condition: IsE2eTest
      Properties:
        Protocol: sqs
        Endpoint: !GetAtt E2eTestQueue.Arn
        RawMessageDelivery: false
        Region: !Ref AWS::Region
        TopicArn: !Ref RestaurantNotificationTopic
    # SNS & EventBridge in e2e tests > Add conditionally deployed EventBridge rule
    E2eTestEventBridgeRule:
      Type: AWS::Events::Rule
      Condition: IsE2eTest
      Properties:
        EventBusName: !Ref EventBus
        EventPattern:
          source: ['big-mouth']
        State: ENABLED
        Targets:
          - Arn: !GetAtt E2eTestQueue.Arn
            Id: e2eTestQueue
            InputTransformer:
              InputPathsMap:
                source: '$.source'
                detailType: '$.detail-type'
                detail: '$.detail'
              InputTemplate: !Sub >
                {
                  "event": {
                    "source": <source>,
                    "detail-type": <detailType>,
                    "detail": <detail>
                  },
                  "eventBusName": "${EventBus}"
                }

  # Since we have added a DynamoDB table to the stack as a custom resource,
  # it's useful to add its name to the stack output.
  # It's not required for the application to work,
  # but it's a good practice to keep important resource information (like DynamoDB table names)
  # in the CloudFormation output so they're easier to find.
  Outputs:
    RestaurantsTableName:
      Value: !Ref RestaurantsTable

    CognitoUserPoolId:
      Value: !Ref CognitoUserPool

    CognitoUserPoolArn:
      Value: !GetAtt CognitoUserPool.Arn

    CognitoUserPoolWebClientId:
      Value: !Ref WebCognitoUserPoolClient

    CognitoUserPoolServerClientId:
      Value: !Ref ServerCognitoUserPoolClient

    EventBusName:
      Value: !Ref EventBus

    RestaurantNotificationTopicName:
      Value: !GetAtt RestaurantNotificationTopic.TopicName

    RestaurantNotificationArn:
      Value: !Ref RestaurantNotificationTopic

    E2eTestQueueUrl:
      Condition: IsE2eTest
      Value: !Ref E2eTestQueue
## !Ref vs !GetAtt
# !Ref refers to the whole resource and gives you a commonly used identification for it (like a resource's name or ID).
# !GetAtt is for when you want to extract a specific attribute from a resource. Usually .Arn
